{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { BonusType } from '../interfaces';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let BowlingService = /*#__PURE__*/(() => {\n  class BowlingService {\n    constructor(router) {\n      this.router = router;\n      this.gameFinish = new EventEmitter();\n      this.playerName$ = new BehaviorSubject(localStorage.getItem('playerName') || '');\n      this.playerScore$ = new BehaviorSubject(new Array(10).fill({\n        isFinished: false,\n        isSpare: false,\n        isStrike: false,\n        index: -1\n      }).map((v, i) => {\n        return Object.assign(Object.assign({}, v), {\n          index: i\n        });\n      }));\n      const playerScore = localStorage.getItem('playerScore');\n\n      if (playerScore) {\n        this.playerScore$.next(JSON.parse(playerScore));\n      }\n    }\n\n    startGame(name) {\n      this.playerName$.next(name);\n      localStorage.setItem('playerName', name);\n      this.restart();\n      this.router.navigate(['/play']);\n    }\n\n    throw(throwScore) {\n      const scoreBoxIndex = this.playerScore$.value.findIndex(sB => !sB.isFinished);\n\n      if (scoreBoxIndex === -1) {\n        return;\n      }\n\n      let scoreBox = Object.assign({}, this.playerScore$.value[scoreBoxIndex]);\n      let newPlayerScore = [...this.playerScore$.value];\n      scoreBox = this.addThrowToBox(scoreBox, throwScore, scoreBoxIndex === 9);\n      scoreBox = this.checkForStrikeOrSpare(scoreBox);\n      scoreBox = this.checkIfBoxFinished(scoreBox, scoreBoxIndex === 9);\n      newPlayerScore[scoreBoxIndex] = scoreBox;\n      newPlayerScore = this.calculateScore(newPlayerScore);\n\n      if (newPlayerScore.findIndex(sB => !sB.isFinished) === -1) {\n        this.gameFinish.emit();\n      }\n\n      localStorage.setItem('playerScore', JSON.stringify(newPlayerScore));\n      this.playerScore$.next(newPlayerScore);\n    }\n\n    addThrowToBox(scoreBox, throwScore, isLastBox) {\n      if (!scoreBox.firstShot) {\n        scoreBox.firstShot = throwScore;\n      } else if (scoreBox.firstShot !== 10 && !scoreBox.secondShot) {\n        scoreBox.secondShot = throwScore;\n      } else if (isLastBox && !scoreBox.thirdShot && (scoreBox.isStrike || scoreBox.isSpare || !!scoreBox.firstShot && !!scoreBox.secondShot)) {\n        scoreBox.thirdShot = throwScore;\n      }\n\n      return scoreBox;\n    }\n\n    checkForStrikeOrSpare(scoreBox) {\n      if (scoreBox.firstShot === 10) {\n        scoreBox.isStrike = true;\n      } else if ((scoreBox.firstShot || 0) + (scoreBox.secondShot || 0) === 10) {\n        scoreBox.isSpare = true;\n      }\n\n      return scoreBox;\n    } // checkIfBoxFinished(scoreBox: IPlayerScoreBox, isLastBox: boolean) {\n    //   scoreBox.isFinished = ((scoreBox.isSpare || scoreBox.isStrike) && !isLastBox) \n    //                       || ((scoreBox.firstShot! > -1) && (scoreBox.secondShot! > -1) && (isLastBox ? scoreBox.thirdShot! > -1 : true))\n    //                       || ((scoreBox.isSpare || scoreBox.isStrike) && scoreBox.thirdShot! > -1 && isLastBox)\n    //                       || (scoreBox.firstShot! > -1) && (scoreBox.secondShot! > -1);\n    //   return scoreBox;\n    // }\n\n\n    checkIfBoxFinished(scoreBox, isLastBox) {\n      if (!isLastBox) {\n        if (scoreBox.isSpare || scoreBox.isStrike) {\n          scoreBox.isFinished = true;\n        } else if (scoreBox.firstShot > -1 && scoreBox.secondShot > -1) {\n          scoreBox.isFinished = true;\n        }\n      } else {\n        if (!scoreBox.isSpare && !scoreBox.isStrike && scoreBox.firstShot > -1 && scoreBox.secondShot > -1) {\n          scoreBox.isFinished = true;\n        } else if ((scoreBox.isSpare || scoreBox.isStrike) && scoreBox.thirdShot > -1) {\n          scoreBox.isFinished = true;\n        }\n      }\n\n      return scoreBox;\n    }\n\n    calculateScore(scores) {\n      let totalScore = 0;\n      let bonusType = BonusType.REGULAR;\n\n      for (let i = 0; i < scores.length; i++) {\n        const box = scores[i];\n\n        if (box.firstShot > -1) {\n          box.score = totalScore + box.firstShot + (box.secondShot || 0);\n\n          if (bonusType !== BonusType.REGULAR && i !== 0 && scores[i - 1].isFinished && (scores[i - 1].isSpare || scores[i - 1].isStrike)) {\n            box.score += bonusType === BonusType.SPARE ? box.firstShot : (box.firstShot || 0) + (box.secondShot || 0);\n          }\n\n          box.score += box.isSpare || box.isStrike ? (box.thirdShot || 0) * 2 : box.thirdShot || 0;\n          totalScore = box.score;\n          bonusType = box.firstShot === 10 ? BonusType.STRIKE : box.firstShot + (box.secondShot || 0) === 10 ? BonusType.SPARE : BonusType.REGULAR;\n        }\n      }\n\n      return scores;\n    }\n\n    restart() {\n      this.playerScore$.next(new Array(10).fill({\n        isFinished: false,\n        isSpare: false,\n        isStrike: false,\n        index: -1\n      }).map((v, i) => {\n        return Object.assign(Object.assign({}, v), {\n          index: i\n        });\n      }));\n      localStorage.setItem('playerScore', JSON.stringify(this.playerScore$.value));\n    }\n\n  }\n\n  BowlingService.ɵfac = function BowlingService_Factory(t) {\n    return new (t || BowlingService)(i0.ɵɵinject(i1.Router));\n  };\n\n  BowlingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BowlingService,\n    factory: BowlingService.ɵfac,\n    providedIn: 'root'\n  });\n  return BowlingService;\n})();","map":null,"metadata":{},"sourceType":"module"}